//--------------------------------------------------------------------------------------
//  ライト   ( light.cpp )
//
//  Author : SHUN YAMASHITA
//--------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------
//  ヘッダーファイル
//--------------------------------------------------------------------------------------
#include "light.h"
#include "manager.h"
#include "renderer.h"

//--------------------------------------------------------------------------------------
//  マクロ定義
//--------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------
//  インスタンス生成
//--------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------
//  ライトクラスのコンストラクタ
//--------------------------------------------------------------------------------------
Light::Light( )
{

}

//--------------------------------------------------------------------------------------
//  ライトクラスのデストラクタ
//--------------------------------------------------------------------------------------
Light::~Light( )
{

}

//--------------------------------------------------------------------------------------
//  ライトの初期化処理
//--------------------------------------------------------------------------------------
HRESULT Light::Init( void )
{
	D3DLIGHT9 light;													//  光源

	//  メインからデバイス情報を取得
	LPDIRECT3DDEVICE9 pDevice = SceneManager::GetRenderer( )->GetDevice( );

	//  光源クラスの初期化
	ZeroMemory( &light , sizeof( D3DLIGHT9 ) );

	light.Type = D3DLIGHT_DIRECTIONAL;									//  光源の種類を平行光源に		
	light.Diffuse = D3DXCOLOR( 1.0f , 0.9f , 0.3f , 1.0f );				//  拡散光

	D3DXVECTOR3 vecDir = D3DXVECTOR3( 0.0f , -0.3f , -1.0f );			//  法線の向き

	//  法線を1.0fに変換
	D3DXVec3Normalize( ( D3DXVECTOR3* )&light.Direction , &vecDir );	

	//  デバイスにライトの設定
	pDevice->SetLight( 0 , &light );

	light.Type = D3DLIGHT_DIRECTIONAL;									//  光源の種類を平行光源に		
	light.Diffuse = D3DXCOLOR( 0.9f , 0.9f , 0.2f , 1.0f );				//  拡散光

	vecDir = D3DXVECTOR3( 1.0f , -0.5f , -1.0f );						//  法線の向き

	//  法線を1.0fに変換
	D3DXVec3Normalize( ( D3DXVECTOR3* )&light.Direction , &vecDir );	

	//  デバイスにライトの設定
	pDevice->SetLight( 1 , &light );

	light.Type = D3DLIGHT_DIRECTIONAL;									//  光源の種類を平行光源に		
	light.Diffuse = D3DXCOLOR( 0.3f , 0.9f , 0.3f , 1.0f );				//  拡散光

	vecDir = D3DXVECTOR3( 0.0f , 0.5f , 1.0f );							//  法線の向き

	//  法線を1.0fに変換
	D3DXVec3Normalize( ( D3DXVECTOR3* )&light.Direction , &vecDir );	

	//  デバイスにライトの設定
	pDevice->SetLight( 2 , &light );

	//  ライトを点ける
	pDevice->LightEnable( 0 , TRUE );

	pDevice->SetRenderState( D3DRS_LIGHTING , true );

	pDevice->SetRenderState( D3DRS_AMBIENT , 0xff999999 );

	return S_OK;
}

//--------------------------------------------------------------------------------------
//  ライトの終了処理
//--------------------------------------------------------------------------------------
void Light::Uninit( void )
{

}

//--------------------------------------------------------------------------------------
//  ライトの更新処理
//--------------------------------------------------------------------------------------
void Light::Update( void )
{

}

//--------------------------------------------------------------------------------------
//  光を点ける関数
//--------------------------------------------------------------------------------------
void Light::SetDiffuseColor( D3DXCOLOR color , int nNo )
{
	D3DLIGHT9 light;													//  光源

	//  メインからデバイス情報を取得
	LPDIRECT3DDEVICE9 pDevice = SceneManager::GetRenderer( )->GetDevice( );

	//  光源クラスの初期化
	ZeroMemory( &light , sizeof( D3DLIGHT9 ) );

	light.Type = D3DLIGHT_DIRECTIONAL;									//  光源の種類を平行光源に		
	light.Diffuse = color;												//  拡散光

	D3DXVECTOR3 vecDir = D3DXVECTOR3( 0.0f , -0.3f , -1.0f );			//  法線の向き

	//  法線を1.0fに変換
	D3DXVec3Normalize( ( D3DXVECTOR3* )&light.Direction , &vecDir );	

	//  デバイスにライトの設定
	pDevice->SetLight( nNo , &light );
}

//--------------------------------------------------------------------------------------
//  光を点ける関数
//--------------------------------------------------------------------------------------
void Light::LightOn( void )
{
	//  メインからデバイス情報を取得
	LPDIRECT3DDEVICE9 pDevice = SceneManager::GetRenderer( )->GetDevice( );

	//  ライトを点ける
	pDevice->SetRenderState( D3DRS_LIGHTING , true );
}

//--------------------------------------------------------------------------------------
//  光を消す関数
//--------------------------------------------------------------------------------------
void Light::LightOff( void )
{
	//  メインからデバイス情報を取得
	LPDIRECT3DDEVICE9 pDevice = SceneManager::GetRenderer( )->GetDevice( );

	//  ライトを消す
	pDevice->SetRenderState( D3DRS_LIGHTING , false );
}